AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to create EC2 instances running a Python
  script with configurable instance count and pre-configured KeyPair.

Parameters:
  InstanceCount:
    Type: Number
    Default: 1
    Description: Number of EC2 instances to create.

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MyVPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - !GetAZs ""
      Tags:
        - Key: Name
          Value: PublicSubnet

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH and HTTP access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        ImageId: ami-0a0e5d9c7acc336f1 # Replace with an appropriate Linux AMI
        InstanceType: t2.micro
        KeyName: python-aws-script # Replace with your key pair name
        SecurityGroupIds:
          - !Ref SecurityGroup
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            exec > /var/log/user-data.log 2>&1
            set -x
            # Update and install dependencies
            yum update -y
            yum install -y python3 python3-pip git
            # Source the environment variables to make them available
            source /etc/environment
            # Clone and run your Python app
            cd /opt
            git clone https://github.com/devevangel/python_aws_script.git
            cd python_aws_script
            pip3 install -r requirements.txt
            nohup python3 main.py > /var/log/main.log 2>&1 &

  EC2Instances:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: !Ref InstanceCount
      MaxSize: !Ref InstanceCount
      DesiredCapacity: !Ref InstanceCount
      VPCZoneIdentifier:
        - !Ref PublicSubnet
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      Tags:
        - Key: Name
          Value: evangel_instance
          PropagateAtLaunch: true # Ensures the tag is applied to EC2 instances launched by the AutoScaling group

Outputs:
  InstanceCount:
    Description: Number of instances created
    Value: !Ref InstanceCount
